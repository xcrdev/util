package com.robledo.util.opengl;
public abstract class OpenGLRenderingContext {

	public static final int LEQUAL = 0x0203;
	public static final int DEPTH_TEST = 0x0B71;
	public static final int COMPILE_STATUS = 0x8B81;
	public static final int FRAGMENT_SHADER = 0x8B30;
	public static final int VERTEX_SHADER = 0x8B31;
	public static final int LINK_STATUS = 0x8B82;
	public static final int ARRAY_BUFFER = 0x8892;
	public static final int ELEMENT_ARRAY_BUFFER = 0x8893;
	public static final int STATIC_DRAW = 0x88E4;
	public static final int COLOR_BUFFER_BIT = 0x00004000;
	public static final int DEPTH_BUFFER_BIT = 0x00000100;
	public static final int FLOAT = 0x1406;
	public static final int TRIANGLES = 0x0004;
	public static final int TEXTURE_2D = 0x0DE1;
	public static final int TEXTURE_MAG_FILTER = 0x2800;
	public static final int TEXTURE_MIN_FILTER = 0x2801;
	public static final int LINEAR = 0x2601;
	public static final int NEAREST_MIPMAP_NEAREST = 0x2700;
	public static final int LINEAR_MIPMAP_NEAREST = 0x2701;
	public static final int NEAREST_MIPMAP_LINEAR = 0x2702;
	public static final int LINEAR_MIPMAP_LINEAR = 0x2703;
	public static final int TEXTURE0 = 0x84C0;
	public static final int UNSIGNED_SHORT = 0x1403;
	public static final int RGB = 0x1907;
	public static final int RGBA = 0x1908;
	public static final int UNSIGNED_BYTE = 0x1401;
	public static final int NEAREST = 0x2600;
	public static final int INT = 0x1404;
	public static final int DYNAMIC_DRAW = 0x88E8;
	public static final int SRC_ALPHA = 0x0302;
	public static final int ONE = 1;
	public static final int BLEND = 0x0BE2;
	public static final int ONE_MINUS_SRC_ALPHA = 0x0303;
	public static final int TEXTURE_WRAP_S = 0x2802;
	public static final int TEXTURE_WRAP_T = 0x2803;
	public static final int CLAMP_TO_EDGE = 0x812F;;
	public static final int REPEAT = 0x2901;
	public static final int UNPACK_FLIP_Y_WEBGL = 0x9240;
	
	public abstract void clearColor (float red, float green, float blue, float alpha);
	public abstract void clearDepth (float depth);
	public abstract void enable (int cap);
	public abstract void depthFunc (int func);
	public abstract void blendFunc (int sfactor, int dfactor);
	public abstract OpenGLShader createShader (int shaderType);
	public abstract void shaderSource (OpenGLShader shader, String shaderSource);
	public abstract void compileShader(OpenGLShader shader);
	public abstract boolean getShaderParameterb(OpenGLShader shader, int pname);
	public abstract String getShaderInfoLog(OpenGLShader shader);
	public abstract OpenGLProgram createProgram();
	public abstract void attachShader(OpenGLProgram program, OpenGLShader shader);
	public abstract void linkProgram(OpenGLProgram program);
	public abstract boolean getProgramParameterb(OpenGLProgram program, int pname);
	public abstract void useProgram(OpenGLProgram program);
	public abstract int getAttribLocation(OpenGLProgram program, String name);
	public abstract void enableVertexAttribArray (int index);
	public abstract OpenGLUniformLocation getUniformLocation(OpenGLProgram program, String name);
	public abstract OpenGLBuffer createBuffer();
	public abstract void bindBuffer(int target, OpenGLBuffer buffer);
	public abstract void bufferData(int target, java.nio.FloatBuffer data, int usage);
	public abstract void bufferData(int target, java.nio.ShortBuffer data, int usage);
	public abstract void viewport(int x, int y, int width, int height);
	public abstract void clear(int mask);
	public abstract void vertexAttribPointer(int index, int size, int type, boolean normalized, int stride, int offset);
	public abstract void uniformMatrix4fv(OpenGLUniformLocation location, boolean transpose, java.nio.FloatBuffer value);
	public abstract void drawArrays(int mode, int first, int count);
	public abstract void bindTexture(int target, OpenGLTexture texture);
	public abstract void texParameteri(int target, int pname, int param);
	public abstract void generateMipmap(int target);
	public abstract void activeTexture(int texture);
	public abstract void uniform1i(OpenGLUniformLocation location, int x);
	public abstract OpenGLTexture createTexture();
	public abstract void flush();
	public abstract void drawElements(int mode, int count, int type, int offset);
	//public abstract void texImage2D(int target, int level, int internalformat, int format, int type, Element image);
	public abstract void texImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, java.nio.ByteBuffer image);
	public abstract void uniform3f(OpenGLUniformLocation location, float x, float y, float z);
	public abstract void pixelStorei(int pname, int param);
}
